# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import crud_pb2 as crud__pb2


class crud_operationsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.fetchStudentD = channel.unary_unary(
                '/crud_operations/fetchStudentD',
                request_serializer=crud__pb2.Null.SerializeToString,
                response_deserializer=crud__pb2.fetch_student_all.FromString,
                )
        self.createStudentD = channel.unary_unary(
                '/crud_operations/createStudentD',
                request_serializer=crud__pb2.create_student.SerializeToString,
                response_deserializer=crud__pb2.success_message.FromString,
                )
        self.updateStudentD = channel.unary_unary(
                '/crud_operations/updateStudentD',
                request_serializer=crud__pb2.update_student.SerializeToString,
                response_deserializer=crud__pb2.success_message.FromString,
                )
        self.deleteStudentD = channel.unary_unary(
                '/crud_operations/deleteStudentD',
                request_serializer=crud__pb2.delete_student.SerializeToString,
                response_deserializer=crud__pb2.success_message.FromString,
                )


class crud_operationsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def fetchStudentD(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createStudentD(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateStudentD(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteStudentD(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_crud_operationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'fetchStudentD': grpc.unary_unary_rpc_method_handler(
                    servicer.fetchStudentD,
                    request_deserializer=crud__pb2.Null.FromString,
                    response_serializer=crud__pb2.fetch_student_all.SerializeToString,
            ),
            'createStudentD': grpc.unary_unary_rpc_method_handler(
                    servicer.createStudentD,
                    request_deserializer=crud__pb2.create_student.FromString,
                    response_serializer=crud__pb2.success_message.SerializeToString,
            ),
            'updateStudentD': grpc.unary_unary_rpc_method_handler(
                    servicer.updateStudentD,
                    request_deserializer=crud__pb2.update_student.FromString,
                    response_serializer=crud__pb2.success_message.SerializeToString,
            ),
            'deleteStudentD': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteStudentD,
                    request_deserializer=crud__pb2.delete_student.FromString,
                    response_serializer=crud__pb2.success_message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'crud_operations', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class crud_operations(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def fetchStudentD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crud_operations/fetchStudentD',
            crud__pb2.Null.SerializeToString,
            crud__pb2.fetch_student_all.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createStudentD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crud_operations/createStudentD',
            crud__pb2.create_student.SerializeToString,
            crud__pb2.success_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateStudentD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crud_operations/updateStudentD',
            crud__pb2.update_student.SerializeToString,
            crud__pb2.success_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteStudentD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crud_operations/deleteStudentD',
            crud__pb2.delete_student.SerializeToString,
            crud__pb2.success_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
